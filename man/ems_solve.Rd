% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ems_solve.R
\name{ems_solve}
\alias{ems_solve}
\title{Configure and solve model}
\usage{
ems_solve(
  cmf_path = NULL,
  n_tasks = 1L,
  n_subintervals = 1L,
  matrix_method = c("LU", "DBBD", "SBBD", "NDBBD"),
  solution_method = c("Johansen", "mod_midpoint"),
  steps = c(2L, 4L, 8L),
  laA = 300L,
  laD = 200L,
  laDi = 500L,
  terminal_run = FALSE,
  ...
)
}
\arguments{
\item{cmf_path}{Character length 1 (default is \code{NULL}), path to the
cmf file generated by \code{\link[=teems_deploy]{teems_deploy()}} or created via an
"in-situ" run with \code{\link[=ems_solve]{ems_solve()}}.}

\item{n_tasks}{Integer length 1 (default is \code{1L}), number of tasks
to run in parallel. Must be \code{1L} if \code{"matrix_method"} == "LU".}

\item{n_subintervals}{Integer length 1 (default is \code{1L}), number of
subintervals for the applied shock. More subintervals may
alleviate accuracy issues stemming from large shock magnitudes.}

\item{matrix_method}{Character of length 1, matrix solution method
(default is \code{"LU"}). Choices:
\itemize{
\item \code{"LU"}: Standard LU decomposition, the most robust and
potentially slowest for a large model. \code{"n_tasks"} must be \code{1L}
if \code{"matrix_method"} == "LU". For use with both static and
dynamic models.
\item \code{"DBBD"}: Doubly bordered block diagonal, parallel solution
method for static models. Potentially faster than \code{"LU"} although
less robust.
\item \code{"SBBD"}: Singly bordered block diagonal, parallel solution
method for intertemporal models. Potentially faster than \code{"LU"}
although less robust.
\item \code{"NDBBD"}: Nested doubly bordered block diagonal, parallel
solution method for large intertemporal models with many
timesteps.
}}

\item{solution_method}{The solution method to be used, default is
the "one-step" \code{"Johansen"}. Choices:
\itemize{
\item \code{"Johansen"}: The Johansen method is fast however it should
only be used as a rough approximation due to handling of
nonlinear equations. See:
https://www.copsmodels.com/gpmanual.htm#gpd1.2.13
\item \code{"mod_midpoint"}: The modified midpoint method
performs multiple passes. See:
https://www.copsmodels.com/gpmanual.htm#gpd3.12.2
}}

\item{steps}{Integer length 3 (default is \code{c(2L, 4L, 8L)}). A
vector of steps for the modified midpoint method, must be all odd
or all even and length 3. Additional steps may improve accuracy
for some model runs.}

\item{laA}{Integer length 1 (default is \code{300L}). The laA memory
parameter for solver pertaining to matrix methods \code{"LU"} and
\code{"SBBD"}. Value is in percentages. Increase gradually if prompted
via "Error return from MA48B/BD because LA is ..."}

\item{laD}{Integer length 1 (default is \code{200L}). The laD memory
parameter for solver pertaining to matrix methods \code{"DBBD"} and
\code{"NDBBD"}. Value is in percentages. Increase gradually if
prompted via "Error return from MA48B/BD because LA is ..."}

\item{laDi}{Integer length 1 (default is \code{500L}). The laDi memory
parameter for solver pertaining to matrix method \code{"NDBBD"}. Value
is in percentages. Increase gradually if prompted via "Error return
from MA48B/BD because LA is ..."}

\item{terminal_run}{Logical length 1 (default is \code{FALSE}). When
\code{TRUE}, the function is exited without running the solver. This
allows the user to close any R IDE or other programs prior to
running from the terminal.}

\item{...}{A named list of input files necessary for an "in-situ"
model run. Names must correspond to "File" statements within the
model Tablo file. Elements correspond to file paths where these
files are found. No checks or modifications are conducted on
input files used in this manner. This mode does not support
partial provision of input file -- all model defined input files
as well as \code{"tab_file"}, \code{"closure_file"}, and \code{"shock_file"}
are required for in-situ model runs.}
}
\value{
File path to a CMF file necessary to execute
\code{\link[=teems_parse]{teems_parse()}}.
}
\description{
\code{ems_solve()} solves the constrained optimization
problem according to a wide range of runtime configuration
options. In order to solve, a \code{teems} Docker image must be
prebuilt according to these specifications. Singularity,
accuracy, and error checks are carried out following a successful
run.
}
\examples{
\dontrun{
# sample static model setup
v6.2_cmf_path <- teems_deploy(model_config = v6.2_model_config,
                             base_config = v6.2_base_config,
                             param_config = v6.2_param_config,
                             set_config = v6.2_set_config,
                             closure_config = v6.2_closure_config)

# The most simple solution is an LU Johansen with a single task:
ems_solve(cmf_path = v6.2_cmf_path,
            matrix_method = "LU",
            solution_method = "Johansen")

# For most model runs however the modified midpoint method is
# preferred. If variable accuracy is unacceptable, increasing the
# number of subintervals and/or steps may improve accuracy. We
# recommend isolating any improvements through slight modifications
# to either subintervals or steps.

# Standard model run with LU and modified midpoint:
ems_solve(cmf_path = v6.2_cmf_path,
            matrix_method = "LU",
            n_subintervals = 2,
            solution_method = "mod_midpoint",
            steps = c(2, 4, 8))

# If a larger static model is being run, the DBBD method leverages
# parallel processing capacities in most modern computers although
# these solution methods are slightly less robust than LU. In a 12
# CPU computer for example, 6-8 tasks is easily handled.

# Standard

# The primary options within this function are whether to run
# the solver in serial or parallel, what solution method to use,



}
}
\seealso{
\code{\link[=ems_compose]{ems_compose()}} for retrieving model results.
}
