% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ems_deploy.R
\name{ems_deploy}
\alias{ems_deploy}
\title{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Loads and execute model-specifc \code{targets} pipeline}
\usage{
ems_deploy(
  model_config,
  load_config,
  model_name = "teems",
  base_dir,
  .testing = FALSE
)
}
\arguments{
\item{model_config}{A list generated by the function
\code{\link[=ems_model]{ems_model()}}.}

\item{load_config}{A list generated by the function
\code{\link[=ems_load]{ems_load()}}.}

\item{model_name}{Character of length 1 (default is \code{"teems"}),
descriptive model name. This string determines the name of
model-specific directory to be written within \code{"base_dir"} as
well as the \code{targets} pipeline file that will be run to generate
all input files. Note that to access the \code{targets} store for a
previously established model, both the \code{"model_name"} and
\code{"base_dir"} must remain constant.}

\item{base_dir}{Character of length 1 (default is \code{tempdir()}),
directory where the model-specific directory and model pipeline
will be written. If \code{tempdir()}, the \code{targets} store and other
model-specific files and directories will not persist across R
sessions. If a persistent directory is specified, some targets
will not need to be rerun in successive R sessions.}

\item{.testing}{Logical of length 1 (default is \code{FALSE}), developer
option. If \code{TRUE}, \code{\link[targets:tar_make]{targets::tar_make()}} will be called with
\code{"callr_function = NULL"}. This allows the model pipeline to be
halted for debugging and/or development purposes through
placement of \code{browser()}.}
}
\value{
File path to a CMF file necessary to execute
\code{\link[=ems_solve]{ems_solve()}}.
}
\description{
\code{ems_deploy()} creates and executes a
\href{https://books.ropensci.org/targets/}{\code{targets}} pipeline for all
loaded specifications according to their various path
dependencies. Outputs from \code{\link[=ems_model]{ems_model()}} and \code{\link[=ems_load]{ems_load()}},
are required inputs to
\code{"model_config"}, \code{"load_config"} respectively.
}
\details{
\code{ems_deploy()} consolidates all user inputs and carries
out all operations necessary to run a CGE model. The output file
path serves as a required input to \code{\link[=ems_solve]{ems_solve()}}.
}
\examples{
\dontrun{
# Ephemeral store and model inputs (written to a temporary directory):
ems_deploy(model_config = model_specs,
           load_config = load_specs,
           model_name = "my_temp_model")

# Persistent store and model inputs
ems_deploy(model_config = model_specs,
           load_config = load_specs,
           model_name = "my_persistent_model",
           base_dir = "~")

# Multiple models can be retained by varying `base_dir` and/or
# `model_name`
ems_deploy(model_config = model_specs,
           load_config = load_specs,
           model_name = "my_second_persistent_model",
           base_dir = "~")
           
# Any pipeline object can be inspected using 
# [`targets::tar_read()`]. For example, the final model closure:
targets::tar_read(name = final.closure,
                  store = "store/path/in/diagnostic/output")
}
}
\seealso{
\code{\link[=ems_model]{ems_model()}} for generating the input to
\code{"model_config"}.

\code{\link[=ems_load]{ems_load()}} for generating the input to
\code{"base_config"}.

\code{\link[=ems_solve]{ems_solve()}} for loading the output of this function.
}
