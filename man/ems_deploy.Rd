% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ems_deploy.R
\name{ems_deploy}
\alias{ems_deploy}
\title{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Loads all specifications executes a model-specifc \code{targets}
pipeline}
\usage{
ems_deploy(
  model_config,
  load_config,
  model_name = "teems",
  base_dir = tempdir(),
  .testing = FALSE
)
}
\arguments{
\item{model_config}{A list generated by the function
\code{\link[=ems_model]{ems_model()}}.}

\item{load_config}{A list generated by the function
\code{\link[=ems_load]{ems_load()}}.}

\item{model_name}{Character of length 1 (default is \code{"teems"}),
descriptive model name. This string determines the name of
model-specific directory to be written within \code{"base_dir"} as
well as the \code{targets} pipeline file that will be run to generate
all input files. Note that to access the \code{targets} store for a
previously established model, both the \code{"model_name"} and
\code{"base_dir"} must remain constant.}

\item{base_dir}{Character of length 1 (default is \code{tempdir()}),
directory where the model-specific directory and model pipeline
will be written. If \code{tempdir()}, the \code{targets} store and other
model-specific files and directories will not persist across R
sessions. If a persistent directory is specified, some targets
will not need to be rerun in successive R sessions.}

\item{.testing}{Logical of length 1 (default is \code{FALSE}), developer
option. If \code{TRUE}, \code{\link[targets:tar_make]{targets::tar_make()}} will be called with
\code{"callr_function = NULL"}. This allows the model pipeline to be
halted for debugging and/or development purposes through
placement of \code{browser()}.}
}
\value{
File path to a CMF file necessary to execute
\code{\link[=ems_solve]{ems_solve()}}.
}
\description{
\code{ems_deploy()} creates and executes a
\href{https://books.ropensci.org/targets/}{\code{targets}} pipeline for all
loaded specifications according to their various path
dependencies. Outputs from \code{\link[=ems_model]{ems_model()}} and \code{\link[=ems_load]{ems_load()}},
are required inputs to
\code{"model_config"}, \code{"load_config"} respectively.
}
\details{
\code{ems_deploy()} consolidates all user inputs and carries
out all operations necessary to run a CGE model. The output file
path serves as a required input to \code{\link[=ems_solve]{ems_solve()}}.
}
\examples{
\dontrun{
# A GTAPv6.2 3-region, 6-sector, 4-endowment static model run with
# numeraire shock. Note that the GTAPv7 is currently only
# compatible with a separate data format not available in freely
# distributed GTAP Databases. Future work will produce a function
# to utilize v6.2 data compatible with GTAPv7 and v7 compatible
# data with v6.2-based models.

v6.2_model_config <- teems_model(tab_file = "GTAPv6.2",
                                ndigits = 8,
                                verbose = TRUE)

v6.2_base_config <- teems_base(base_har = "~/dat/GTAP/v9/2011/gddat.har")

v6.2_param_config <- teems_param(par_har = "~/dat/GTAP/v9/2011/gdpar.har")

v6.2_set_config <- teems_sets(set_har = "~/dat/GTAP/v9/2011/gdset.har",
                             region_mapping = "big3",
                             sector_mapping = "macro_sector",
                             endowment_mapping = "labor_agg",
                             verbose = TRUE)

v6.2_numeraire_shk <- teems_shock(var = "pfactwld",
                                 type = "uniform",
                                 value = 1)

v6.2_closure_config <- teems_closure(shock = v6.2_numeraire_shk)

v6.2_cmf_path <- teems_deploy(model_config = v6.2_model_config,
                             base_config = v6.2_base_config,
                             param_config = v6.2_param_config,
                             set_config = v6.2_set_config,
                             closure_config = v6.2_closure_config,
                             verbose = TRUE)

# A GTAP-INTv1 3-region, 6-sector, 4-endowment, 5 timestep
# intertemporal model run with numeraire shock.
INTv1_model_config <- teems_model(tab_file = "GTAP-INTv1",
                                  ndigits = 8,
                                  verbose = TRUE)

INTv1_base_config <- teems_base(base_har = "~/dat/GTAP/v9/2011/gddat.har")

INTv1_param_config <- teems_param(par_har = "~/dat/GTAP/v9/2011/gdpar.har")

INTv1_set_config <- teems_sets(set_har = "~/dat/GTAP/v9/2011/gdset.har",
                               region_mapping = "big3",
                               sector_mapping = "macro_sector",
                               endowment_mapping = "labor_agg",
                               verbose = TRUE)

INTv1_numeraire_shk <- teems_shock(var = "pfactwld",
                                   type = "uniform",
                                   value = 1)

INTv1_closure_config <- teems_closure(shock = INTv1_numeraire_shk)

INTv1_time_config <- teems_time(time_steps = c(2011, 2012, 2015, 2020, 2030))

INTv1_cmf_path <- teems_deploy(model_config = INTv1_model_config,
                               base_config = INTv1_base_config,
                               param_config = INTv1_param_config,
                               set_config = INTv1_set_config,
                               closure_config = INTv1_closure_config,
                               time_config = INTv1_time_config,
                               verbose = TRUE)

# In the examples above the `targets` store and model input files
# will be written to a per-session temporary folder that will not
# persist. In order to fully take advantage of the `targets`
# package underpinning `teems`, `"model_name"` and `"base_dir"`
# arguments allow for model directories to persist across sessions.

custom_path <- teems_deploy(model_config = INTv1_model_config,
                            base_config = INTv1_base_config,
                            param_config = INTv1_param_config,
                            set_config = INTv1_set_config,
                            closure_config = INTv1_closure_config,
                            time_config = INTv1_time_config,
                            model_name = "custom_INT",
                            base_dir = path.expand(path = "~"))

# Example: Pre-model run directory layout assuming path.expand("~")
# evaluates to /home/user
# Any of the objects above in (/home/user/custom_INT/store/objects)
# can be inspected using [`targets::tar_read()`]. For example, the
# final model closure:
targets::tar_read(name = final.closure,
                  store = "/home/user/custom_INT/store")
}
}
\seealso{
\code{\link[=ems_model]{ems_model()}} for generating the input to
\code{"model_config"}.

\code{\link[=ems_load]{ems_load()}} for generating the input to
\code{"base_config"}.

\code{\link[=ems_solve]{ems_solve()}} for loading the ouput of this function.
}
